import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import Classes.pohiClass as RohearvutusPohi




def addJuht(RohearvutusPohi, key_prefix):

    # üìå APPLY CUSTOM CSS TO STYLE COLUMNS AND ADD A DIVIDER
    st.markdown(
        """
        <style>

            /* Create a vertical divider */
            .divider {
                border-right: 2px solid #ccc;
                height: 100%;
                position: absolute;
                left: 50%;
                top: 0;
            }

            /* Center the summary box */
            .summary-box {
                background-color: ;
                width: 40%;
                padding: 10px;
                border-radius: 5px;
                text-align: center;
                color: black;
                font-weight: bold;
                font-size: 18px;
                margin: 20px auto; /* Centers the div */
            }

            /* Center the red result box */
            .result-box {
                background-color: #99dea9;
                width: 40%;
                padding: 10px;
                border-radius: 5px;
                text-align: center;
                color: black;
                font-weight: bold;
                font-size: 22px;
                margin: 10px auto; /* Centers the div */
            }

        </style>
        """,
        unsafe_allow_html=True,
    )

    # üìå CREATE TWO COLUMNS WITH A VERTICAL LINE
    #col1, col2 = st.columns([1, 1])  # Two equal columns

    #with col1:
        # üìå DATA FOR FIRST TABLE (Editable)


    yhikud = [RohearvutusPohi.get_pohi_ehitatud(), RohearvutusPohi.get_pohi_ehitatud(), 
              RohearvutusPohi.get_pohi_haljas(), 
              RohearvutusPohi.get_pohi_vett(), RohearvutusPohi.get_pohi_vaart()]

    if f"{key_prefix}_data" not in st.session_state:
        st.session_state[f"{key_prefix}_data"] = yhikud
    
    data_1 = {
        "Komponendid": [
            "T√§isehitatud, k√µvakattega, vett mittel√§bilaskvad alad.",
            "Maapinnaga √ºhendatud taimkattega ala.",
            "Haljastatud/looduslike kallastega vee-elupaigad ja looduslikud veekogud.",
            "Vett l√§bilaskvad pinnakatted ja ka sillutised.",
            "V√§√§rtuslik kasvukohat√º√ºp.",
        ],
        "Sisestage √úhikuid DP (m¬≤)": st.session_state[f"{key_prefix}_data"],  # Editable column
        "Selgitus": [
        "Alad, mis ei panusta rohefaktorisse. Hoonete puhul v√µetakse detailplaneeringu rohefaktoris arvesse ehitusalune pind. Ehitusloa staadiumis on v√µimalik v√µtta arvesse konsoolsete osade alla j√§√§v maapinnaga √ºhendatud haljastus. Boonusfaktorina v√µib olla v√µimalik kaaluda haljaskatuste/fassaadide rajamist (vt allpool).",
        "Maakatte p√µhifaktorina ei eristata muru/ilupeenardee/lilleniidu vms rajatud koosluste √∂koloogilist kvaliteeti. Erinev rohefaktor saavutatakse samale alale t√§iendavate boonusfaktorite arvesse v√µtmise teel (vt allpool). See t√§hendab, et muru puhul j√§√§b koefitsient ikka 1-ks , aga lilleniidu puhul arvutatakse boonusfaktori real sama pindala veelkord l√§bi faktoriga 0,4, mis summeerides annab kokku 1,4. ",
        "Elurikkust ja j√§tkusuutlikku sademeveek√§itlust soosivad vee-elupaigad. Siin ei v√µeta arvesse tehislikke basseine/purskkaevusid, need arvestada k√µvakattega alade hulka.",
        "Siin v√µetakse arvesse k√µik maakattet√º√ºbid, kus <80 protsendi laotisest vett mittel√§bilaskev. Arvutus ei erista sillutisi nende l√§bilaskev√µime j√§rgi. Ehitusloa staadiumis t√§psustatakse komponenti, kusjuures v√µib s√µltuvalt materjalivalikust koefitsient olla nii k√µrgem kui madalam (0,3-0,5) ",
        "V√µrdsustatakse nimetatud korra ¬ß11 lg (4) s√§ilitamiskohustusega I-II klassi kasvukohat√º√ºbid ja III-IV v√§√§rtusklassi kasvukohat√º√ºbid. NB! V√§√§rtusliku kasvukohat√º√ºbi esinemisalale ei rakendata boonusfaktoreid, ehk nende ulatuses ei ole lubatud vee-elupaikade rajamine, uute puude istutamine vms. Uute rohetaristu komponentide rajamine v√§√§rtuslikes elupaikades rikuks elupaiga tunnused.",
    ],
    }

    df_1 = pd.DataFrame(data_1)

    # üìå DISPLAY FIRST TABLE (Editable)
    #col_ro, col2 = st.columns([1, 1])  # Two equal columns
    #st.title("üìä Rohefaktori Kalkulaator")

    st.subheader("üîπ Sisesta v√§√§rtused juhtotstarve")

    #col_table, col_info = st.columns([3, 1])

        # Display editable table with inline info buttons
    
    edited_df_1 = st.data_editor(
        df_1.drop(columns=["Selgitus"]),  # Hide Selgitus column from main table
        key="table_with_info",
        column_config={
            "Komponendid": st.column_config.Column("Komponendid", disabled=True, width="large"),
            "Sisestage √úhikuid DP (m¬≤)": st.column_config.Column(
                "Sisestage √úhikuid DP (m¬≤)", 
                required=True, 
                width="medium", 
                help="T√§ita tuleb ainult see veerg."
            ),
            "Info": st.column_config.Column("‚ÑπÔ∏è Info", disabled=True, width="small"),
        },
        hide_index=True,
    )

    # Create columns and popovers with compact buttons
    col1= st.columns(1)

    #with col1:
    with st.popover(f"‚ÑπÔ∏è"):
        st.markdown(f"**{df_1['Komponendid'][0]}**")
        st.write(df_1["Selgitus"][0])
        st.markdown(f"**{df_1['Komponendid'][1]}**")
        st.write(df_1["Selgitus"][1])
        st.markdown(f"**{df_1['Komponendid'][2]}**")
        st.write(df_1["Selgitus"][2])
        st.markdown(f"**{df_1['Komponendid'][3]}**")
        st.write(df_1["Selgitus"][3])
        st.markdown(f"**{df_1['Komponendid'][4]}**")
        st.write(df_1["Selgitus"][4])
    

    # ‚úÖ **Force Streamlit to immediately recognize the changes**
    updated_values = edited_df_1["Sisestage √úhikuid DP (m¬≤)"].tolist()
    if st.session_state[f"{key_prefix}_data"] != updated_values:
        st.session_state[f"{key_prefix}_data"] = updated_values
        st.rerun()  # Force a refresh to reflect changes in the second table

    RohearvutusPohi.set_pohi_ehitatud(updated_values[0])
    RohearvutusPohi.set_pohi_ehitatud(updated_values[1])
    RohearvutusPohi.set_pohi_haljas(updated_values[2])
    RohearvutusPohi.set_pohi_vett(updated_values[3])
    RohearvutusPohi.set_pohi_vaart(updated_values[4])


    data_2 = {
        "Komponendid": [
            "T√§isehitatud, k√µvakattega, vett mittel√§bilaskvad alad.",
            "Maapinnaga √ºhendatud taimkattega ala.",
            "Haljastatud/looduslike kallastega vee-elupaigad ja looduslikud veekogud.",
            "Vett l√§bilaskvad pinnakatted ja ka sillutised.",
            "V√§√§rtuslik kasvukohat√º√ºp.",
        ],
        "√úhikuid DP": st.session_state[f"{key_prefix}_data"],  # ‚úÖ Uses latest session state values
        "Koefitsient": [0, 1, 1, 0.4, 1.8],  # Fixed values
        "RF - DP": [st.session_state[f"{key_prefix}_data"][i] * [0, 1, 1, 0.4, 1.8][i] for i in range(len(updated_values))],  # Dynamic Calculation
    }


    df_2 = pd.DataFrame(data_2)

    # Format numbers to 2 decimal places
    df_2["Koefitsient"] = df_2["Koefitsient"].round(2)
    df_2["RF - DP"] = df_2["RF - DP"].round(2)

     # üìå SECOND TABLE (Results)
    st.write("")  # Adds a blank line
    st.write("")  # Adds another blank line

    

    st.subheader("üìà Uuendatud Arvutustabel")
    st.dataframe(df_2)

    # üìå CALCULATE "Rohefaktor" (SUM OF ALL USER INPUTS)
    rohefaktor = edited_df_1["Sisestage √úhikuid DP (m¬≤)"].sum() / RohearvutusPohi.get_osapindala()


     # üìå SECOND TABLE (Results)
    st.write("")  # Adds a blank line
    st.write("")  # Adds another blank line
    st.write("")  # Adds another blank line
    st.write("")  # Adds another blank line
  


    # üìå DISPLAY CENTERED SUMMARY SECTION
    st.markdown("<div class='summary-box'>Planeeringulahendusega kavandatud maakattet√º√ºpide rohefaktor</div>", unsafe_allow_html=True)
    st.markdown(f"<div class='result-box'>{rohefaktor:.2f}</div>", unsafe_allow_html=True)


    # üìå ADD A VERTICAL DIVIDER BETWEEN COLUMNS
    #st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
