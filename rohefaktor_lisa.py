import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import Classes.pohiClass as RohearvutusPohi



def addJuht(RohearvutusPohi, key_prefix):

    # ğŸ“Œ APPLY CUSTOM CSS TO STYLE COLUMNS AND ADD A DIVIDER
    st.markdown(
        """
        <style>

            /* Create a vertical divider */
            .divider {
                border-right: 2px solid #ccc;
                height: 100%;
                position: absolute;
                left: 50%;
                top: 0;
            }

            /* Center the summary box */
            .summary-box {
                background-color: ;
                width: 40%;
                padding: 10px;
                border-radius: 5px;
                text-align: center;
                color: black;
                font-weight: bold;
                font-size: 18px;
                margin: 20px auto; /* Centers the div */
            }

            /* Center the red result box */
            .result-box {
                background-color: #99dea9;
                width: 40%;
                padding: 10px;
                border-radius: 5px;
                text-align: center;
                color: black;
                font-weight: bold;
                font-size: 22px;
                margin: 10px auto; /* Centers the div */
            }

            /* Center the red result box */
            .result-box-red {
                background-color: #bf5461;
                width: 40%;
                padding: 10px;
                border-radius: 5px;
                text-align: center;
                color: black;
                font-weight: bold;
                font-size: 22px;
                margin: 10px auto; /* Centers the div */
            }

        </style>
        """,
        unsafe_allow_html=True,
    )

    # ğŸ“Œ CREATE TWO COLUMNS WITH A VERTICAL LINE
    #col1, col2 = st.columns([1, 1])  # Two equal columns

    #with col1:
        # ğŸ“Œ DATA FOR FIRST TABLE (Editable)


    yhikud = [RohearvutusPohi.get_pohi_ehitatud(), RohearvutusPohi.get_pohi_ehitatud(), 
              RohearvutusPohi.get_pohi_haljas(), 
              RohearvutusPohi.get_pohi_vett(), RohearvutusPohi.get_pohi_vaart()]

    if f"{key_prefix}_data" not in st.session_state:
        st.session_state[f"{key_prefix}_data"] = yhikud

    # ğŸ“Œ DISPLAY FIRST TABLE (Editable)
    #col_ro, col2 = st.columns([1, 1])  # Two equal columns
    #st.title("ğŸ“Š Rohefaktori Kalkulaator")

    st.subheader("Sisesta vÃ¤Ã¤rtused juhtotstarve")
    st.write("Sisestage Ãœhikuid DP (mÂ²)")

    #col_table, col_info = st.columns([3, 1])

        # Display editable table with inline info buttons

    numberfcol1 = st.number_input("**TÃ¤isehitatud, kÃµvakattega, vett mittelÃ¤bilaskvad alad.**", value=0, placeholder = "Sisestage Ãœhikuid DP (mÂ²)", help="TÃ¤isehitatud, kÃµvakattega, vett mittelÃ¤bilaskvad alad. Alad, mis ei panusta rohefaktorisse. Hoonete puhul vÃµetakse detailplaneeringu rohefaktoris arvesse ehitusalune pind. Ehitusloa staadiumis on vÃµimalik vÃµtta arvesse konsoolsete osade alla jÃ¤Ã¤v maapinnaga Ã¼hendatud haljastus. Boonusfaktorina vÃµib olla vÃµimalik kaaluda haljaskatuste/fassaadide rajamist (vt allpool).")
    numberfcol2 = st.number_input("**Maapinnaga Ã¼hendatud taimkattega ala.**", value=0, placeholder = "Sisestage Ãœhikuid DP (mÂ²)", help="Maakatte pÃµhifaktorina ei eristata muru/ilupeenardee/lilleniidu vms rajatud koosluste Ã¶koloogilist kvaliteeti. Erinev rohefaktor saavutatakse samale alale tÃ¤iendavate boonusfaktorite arvesse vÃµtmise teel (vt allpool). See tÃ¤hendab, et muru puhul jÃ¤Ã¤b koefitsient ikka 1-ks , aga lilleniidu puhul arvutatakse boonusfaktori real sama pindala veelkord lÃ¤bi faktoriga 0,4, mis summeerides annab kokku 1,4.")
    numberfcol3 = st.number_input("**Looduslikud veekogud.**", value=0, placeholder = "Sisestage Ãœhikuid DP (mÂ²)", help="Elurikkust ja jÃ¤tkusuutlikku sademeveekÃ¤itlust soosivad vee-elupaigad. Siin ei vÃµeta arvesse tehislikke basseine/purskkaevusid, need arvestada kÃµvakattega alade hulka.")
    numberfcol4 = st.number_input("**Vett lÃ¤bilaskvad pinnakatted ja ka sillutised.**", value=0, placeholder = "Sisestage Ãœhikuid DP (mÂ²)", help="Siin vÃµetakse arvesse kÃµik maakattetÃ¼Ã¼bid, kus <80 protsendi laotisest vett mittelÃ¤bilaskev. Arvutus ei erista sillutisi nende lÃ¤bilaskevÃµime jÃ¤rgi. Ehitusloa staadiumis tÃ¤psustatakse komponenti, kusjuures vÃµib sÃµltuvalt materjalivalikust koefitsient olla nii kÃµrgem kui madalam (0,3-0,5)")
    numberfcol5 = st.number_input("**VÃ¤Ã¤rtuslik kasvukohatÃ¼Ã¼p.**", value=0, placeholder = "Sisestage Ãœhikuid DP (mÂ²)", help= "VÃµrdsustatakse nimetatud korra Â§11 lg (4) sÃ¤ilitamiskohustusega I-II klassi kasvukohatÃ¼Ã¼bid ja III-IV vÃ¤Ã¤rtusklassi kasvukohatÃ¼Ã¼bid. NB! VÃ¤Ã¤rtusliku kasvukohatÃ¼Ã¼bi esinemisalale ei rakendata boonusfaktoreid, ehk nende ulatuses ei ole lubatud vee-elupaikade rajamine, uute puude istutamine vms. Uute rohetaristu komponentide rajamine vÃ¤Ã¤rtuslikes elupaikades rikuks elupaiga tunnused.")

    RohearvutusPohi.set_pohi_ehitatud(numberfcol1)
    RohearvutusPohi.set_pohi_ehitatud(numberfcol2)
    RohearvutusPohi.set_pohi_haljas(numberfcol3)
    RohearvutusPohi.set_pohi_vett(numberfcol4)
    RohearvutusPohi.set_pohi_vaart(numberfcol5)

    entered_values = [numberfcol1, numberfcol2, numberfcol3, numberfcol4, numberfcol5]
    koefitsient = [0, 1, 1, 0.4, 1.8]
    rf_dp = [round(entered_values[i] * koefitsient[i], 2) for i in range(5)]


        # Create table
    data_2 = {
        "Komponendid": [
            "TÃ¤isehitatud, kÃµvakattega, vett mittelÃ¤bilaskvad alad.",
            "Maapinnaga Ã¼hendatud taimkattega ala.",
            "Looduslikud veekogud.",
            "Vett lÃ¤bilaskvad pinnakatted ja ka sillutised.",
            "VÃ¤Ã¤rtuslik kasvukohatÃ¼Ã¼p.",
        ],
        "Ãœhikuid DP": entered_values,
        "Koefitsient": koefitsient,
        "RF - DP": rf_dp,
    }

    df_2 = pd.DataFrame(data_2)

    st.subheader("LÃµplik Arvutustabel")

    # Display table
    st.dataframe(df_2)
    #st.dataframe(df_2.style.format(subset=["Ãœhikuid DP", "Koefitsient", "RF - DP"], formatter="{:.1f}"))

     # ğŸ“Œ SECOND TABLE (Results)
    st.write("")  # Adds a blank line
    st.write("")  # Adds another blank line

    

    #st.subheader("ğŸ“ˆ Uuendatud Arvutustabel")
    #st.dataframe(df_2)


    # ğŸ“Œ CALCULATE "Rohefaktor" (SUM OF ALL USER INPUTS)
    rohefaktor = (numberfcol1+numberfcol2+numberfcol3+numberfcol4+numberfcol5) / int(RohearvutusPohi.get_osapindala())


     # ğŸ“Œ SECOND TABLE (Results)
    #st.write("")  # Adds a blank line
    ##st.write("")  # Adds another blank line
    #st.write("")  # Adds another blank line
  


    # ğŸ“Œ DISPLAY CENTERED SUMMARY SECTION
    st.markdown("<div class='summary-box'>Planeeringulahendusega kavandatud maakattetÃ¼Ã¼pide rohefaktor</div>", unsafe_allow_html=True)
    if (rohefaktor >= RohearvutusPohi.get_rf()):
        st.markdown(f"<div class='result-box'>{rohefaktor:.2f}</div>", unsafe_allow_html=True)
    else:
        st.markdown(f"<div class='result-box-red'>{rohefaktor:.2f}</div>", unsafe_allow_html=True)

    return rohefaktor


    # ğŸ“Œ ADD A VERTICAL DIVIDER BETWEEN COLUMNS
    #st.markdown("<div class='divider'></div>", unsafe_allow_html=True)
