import streamlit as st
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import base64
import rohefaktor_lisa
import taotlusvaartus
from Classes.taotlusClass import TaotlusClass 
from Classes.pohiClass import RohearvutusPohi
import boonus
import io

def get_base64(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()

st.set_page_config(
    page_title="Rohefaktori arvutamine",
    page_icon="üçÉ",
    #layout="wide",
    menu_items={
        'Get Help': 'https://www.extremelycoolapp.com/help',
        'Report a bug': "https://www.extremelycoolapp.com/bug",
        'About': "See on Tallinna rohefaktori arvutamise kalkulaator"
    }
)

def set_bg_image(image_file):
    bin_str = get_base64(image_file)
    bg_image = f'''
    <style>
    .stApp {{
        background-image: url("data:image/png;base64,{bin_str}");
        background-size: cover;
        background-position: center;
        background-repeat: no-repeat;
        background-attachment: fixed;
    }}
    </style>
    '''
    st.markdown(bg_image, unsafe_allow_html=True)

# Call the function with your image file
#set_bg_image('beauty.jpg')


st.title("Detailplaneeringu rohefaktori taotlusv√§√§rtuse m√§√§ramine")
st.markdown("*Tallinna linna rohefaktori t√∂√∂riist toetab  planeeritaval alal k√µrgekvaliteedilise rohetaristu kavandamist. Kavandatava lahenduse √∂koloogilise kvaliteedi hindamiseks on koostatud arvutustabel, mis aitab kaasa n√µuetekohase arvutuse l√§biviimisele. Allj√§rgnevalt on kirjeldatud, kuidas rohefaktori anal√º√ºs l√§bi viiakse. Esimese asjana on vajalik seadistada, kas arvutus tehakse detailplaneeringu v√µi ehitusprojekti tasandil.*")

# T√∂√∂p√§evade arv



#st.sidebar.markdown("See siin on n√§ide!")

##########################################################################################
#st.subheader("**Detailplaneeringu rohefaktori taotlusv√§√§rtuse m√§√§ramine.**")
st.divider()
st.subheader("**1. Samm: Taotlusv√§√§rtuse m√§√§ramine**")
st.divider()


col1, col2 = st.columns(2)
number = 0
option_arv = 0

    

# Initialize Streamlit columns
#col_juht1, col_juht2, col_juht3 = st.columns(3)
st.write(f"### **Juhtotstarve**")

number = st.number_input("**Kogu detailplaneeringuala pindala (m2)**", value = 0.0,)

class1 = TaotlusClass(number=1, pindala=number)


taotlusvaartus.callVaartus(class1)

#st.write(class1) 
#st.write(class1.get_osapindala())



arvutustabel1 = RohearvutusPohi(class1.get_pindala(), class1.get_osapindala(), class1.get_rf())



#####################################################################################################
st.divider()
st.subheader("**2. Samm: Rohefaktori arvutus**")

rf = 0
buffer = io.BytesIO()
user_input = 'NULL'
datatest = 'NULL'

col1, col2 = st.columns(2)

with col1:
    st.write('Sisesta DP kood:')
    user_input = st.text_input('Sisesta kood:', placeholder="Sisesta kood:", label_visibility="collapsed")

with col2:
    st.write('T√µmba alla tulemuste Excel:')

    if user_input.upper().startswith("DP") and len(user_input) == 8:
        datatest = user_input

        count = class1.calculate_rf(class1.get_number(),
					    class1.get_pindala(),
 					    class1.get_protsent(), 
					    class1.get_pind(), 
					    class1.get_maakasutus(),
                        class1.get_osapindala())

        # ‚úÖ Create the Excel content BEFORE rendering the button
        df1 = pd.DataFrame({"DP kood": [user_input], "RF": [count]})

        with pd.ExcelWriter(buffer, engine='xlsxwriter') as writer:
            df1.to_excel(writer, sheet_name='Sheet1', index=False)

        buffer.seek(0)

        st.download_button(
            label="üìù Laadi Excel",
            data=buffer,
            file_name="rohefaktor_raport.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
    else:
        #st.write('T√µmba alla tulemuste Excel:')
        st.write("‚ùå Eelnevalt t√§ida √µige DP kood")



st.divider()


agree = st.checkbox("Boonusfaktorite arvutus")

rf = rohefaktor_lisa.addJuht(arvutustabel1, "SV1")

if agree:
    boonus.bonus()














